package de.ems.addressbuch.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RequestBody;

import de.ems.addressbuch.exception.ResourceNotFoundException;
import de.ems.addressbuch.model.Person;
import de.ems.addressbuch.model.Testv1Entity;
import de.ems.addressbuch.repository.PersonenRepository;
import de.ems.addressbuch.repository.Testv1Repository;
import de.ems.addressbuch.service.PersonenService;
import de.ems.tools.AbstractPK;

@Service
public class PersonenServiceImpl implements PersonenService {

	@Autowired
	private PersonenRepository personenRepository;

	@Autowired
	private Testv1Repository testv1Repository;

	@Override
	public Person createPerson() {
		Person p = new Person();
		p.setPk(AbstractPK.create());
		return p;
	}	
	
	@Override
	public Person savePerson(Person person) {
		
		return personenRepository.save(person);
	}

	@Override
	public Testv1Entity saveTest(Testv1Entity testPerson) {
		return testv1Repository.save(testPerson);
	}

	@Override
	public List<Person> getAllPersonen() {
		return personenRepository.findAll();
	}

	@Override
	public List<Testv1Entity> getAllPersonenFromTestv1() {
		return testv1Repository.findAll();
	}

	@Override
	public ResponseEntity<Testv1Entity> getPersonByPkTest(Long pk) {
		Testv1Entity personTest = testv1Repository.findById(pk)
				.orElseThrow(() -> new ResourceNotFoundException("Person not exist with pk: " + pk));
		
		return ResponseEntity.ok(personTest);
	}

	@Override
	public ResponseEntity<Testv1Entity> updatePersonTest(Long pk, Testv1Entity personDetailsTest) {
		Testv1Entity personTest = testv1Repository.findById(pk)
				.orElseThrow(() -> new ResourceNotFoundException("Person not exist with pk: " + pk));
		
		personTest.setVorname(personDetailsTest.getVorname());
		personTest.setNachName(personDetailsTest.getNachName());
		personTest.setEmailId(personDetailsTest.getEmailId());
		
		Testv1Entity updatedPersonTest = testv1Repository.save(personTest);
		return ResponseEntity.ok(updatedPersonTest);
	}
	
	@Override
	public ResponseEntity<Map<String, Boolean>> deletePersonTest(Long pk){
		Testv1Entity personTest = testv1Repository.findById(pk)
				.orElseThrow(() -> new ResourceNotFoundException("Person not exist with pk: " + pk));
		
		testv1Repository.delete(personTest);
		
		Map<String, Boolean> response = new HashMap<>();
		response.put("deleted", Boolean.TRUE);
		return ResponseEntity.ok(response);		
	}



}
