package de.ems.addressbuch.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import de.ems.addressbuch.model.Person;
import de.ems.addressbuch.model.Testv1Entity;
import de.ems.addressbuch.repository.PersonenRepository;
import de.ems.addressbuch.repository.Testv1Repository;
import de.ems.addressbuch.service.PersonenService;
import de.ems.tools.AbstractPK;

@RestController
@RequestMapping("/api/")
public class PersonenController {
	
	@Autowired
	private PersonenService personenService;

	@GetMapping("/version")
	public ResponseEntity<String> getVersion() {
		System.out.println("Enter Version");
		return new ResponseEntity<String>("V0.0.1", HttpStatus.OK);
	}

	@GetMapping("/personen")
	public List<Person> getAllPersonen() {
		System.out.println("getAllPersonen");
		return personenService.getAllPersonen();
	}

	// create person restAPI

	@PostMapping("/personen/create")
	public Person createEmployee(@RequestBody Person person) {
		System.out.println("Testing for creating");
		return personenService.savePerson(person);
	}
	
	//Get by id api
	@GetMapping("/personen/{pk}")
	public ResponseEntity<Person> getPersonByPk(@PathVariable String pk){
		System.out.println("Person with id: " + pk);
		return personenService.getPersonByPk(pk);
	}
	
	@PutMapping("/personen/{pk}")
	public ResponseEntity<Person> updatePerson(@PathVariable String pk, @RequestBody Person personDetails){
		System.out.println("it is updated");
		return personenService.updatePerson(pk, personDetails);
	}
	
	@DeleteMapping("/personen/{pk}")
	public ResponseEntity<Map<String, Boolean>> deletePerson(@PathVariable String pk){
		System.out.println("Person with id: " + pk + "is deleted");
		return personenService.deletePerson(pk);
	}
		
	
	@GetMapping("/allepersonentestv1")
	public List<Testv1Entity> getAllPersonenTestv1() {
		System.out.println("I am working here");
		return personenService.getAllPersonenFromTestv1();
	}

	@PostMapping("/createTest")
	public Testv1Entity createTest(@RequestBody Testv1Entity testPerson) {
		return personenService.saveTest(testPerson);
	}

	@GetMapping("/testPerson/{pk}")
	public ResponseEntity<Testv1Entity> getPeopleByPkTest(@PathVariable Long pk) {
		System.out.println("Person with id: " + pk);
		return personenService.getPersonByPkTest(pk);
	}
	
	@PutMapping("/testPerson/{pk}")
	public ResponseEntity<Testv1Entity> updatePersonTest(@PathVariable Long pk, @RequestBody Testv1Entity testPersonDetails){
		System.out.println("Person is updated");
		return personenService.updatePersonTest(pk, testPersonDetails);
	}
	
	@DeleteMapping("/testPerson/{pk}")
	public ResponseEntity<Map<String, Boolean>> deletePersonTest(@PathVariable Long pk){
		System.out.println("Person with id:" + pk + "is deleted");
		return personenService.deletePersonTest(pk);
	}	

}
