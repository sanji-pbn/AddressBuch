
package de.ems.addressbuch.service;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import de.ems.addressbuch.model.Anschrift;
import de.ems.addressbuch.model.CompleteAddress;
import de.ems.addressbuch.model.Kontakt;
import de.ems.addressbuch.model.Person;

@Service
public class CompleteAddressServiceImpl implements CompleteAddressService {

	private static Logger log = Logger.getLogger(CompleteAddressServiceImpl.class.getName());

	@Autowired
	private PersonenService personenService;

	@Autowired
	private KontaktService kontaktService;

	@Autowired
	private AnschriftService anschriftService;

	@Override
	public List<CompleteAddress> getCompleteAddressList() {
		List<CompleteAddress> completeAddressList = new ArrayList<>();

		List<Person> pList = personenService.getAllPersonen();

		List<Kontakt> kontaktList = kontaktService.getAlleKontakte();

		List<Anschrift> anschriftenList = anschriftService.getAlleAnschrifte();

		for (Person p : pList) {

			CompleteAddress completeAddress = buildcompleteAddress(p, kontaktList, anschriftenList);

			completeAddressList.add(completeAddress);
		}
		return completeAddressList;
	}

	private CompleteAddress buildcompleteAddress(Person person, List<Kontakt> kontaktList,
			List<Anschrift> anschriftenList) {

		CompleteAddress completeAddress = new CompleteAddress();

		completeAddress.setPerson(person);

		// getKontaktByFk(e.getPk()) -> KontaktListe
		List<Kontakt> kontakteForPerson = getKontaktListeByPersonFk(person.getPk(), kontaktList);
		// getAnschiftByFk(e.getPk()) -> Anschrift
		List<Anschrift> anschriftenForPerson = getAnschriftenListeByPersonFk(person.getPk(), anschriftenList);

		if (!kontakteForPerson.isEmpty())
			completeAddress.setKontakt(kontakteForPerson.get(0));

		if (!anschriftenForPerson.isEmpty())
			completeAddress.setAnschrift(anschriftenForPerson.get(0));

		return completeAddress;
	}

	private List<Anschrift> getAnschriftenListeByPersonFk(String person_fk, List<Anschrift> anschriftenList) {

		List<Anschrift> anschriftenForPerson = new ArrayList<>();

		if (anschriftenList == null) {
			log.warn("AnschriftenList ist null");
			return anschriftenForPerson;
		}

		for (Anschrift a : anschriftenList) {
			if (person_fk.compareTo(a.getPerson_fk()) == 0)
				anschriftenForPerson.add(a);
		}

		return anschriftenForPerson;
	}

	private List<Kontakt> getKontaktListeByPersonFk(String person_fk, List<Kontakt> gesamtListe) {

		List<Kontakt> kontakteForPerson = new ArrayList<>();

		if (gesamtListe == null) {
			log.warn("GesamtListe is null!");
			return kontakteForPerson;
		}

		for (Kontakt k : gesamtListe) {
			if (person_fk.compareTo(k.getPerson_fk()) == 0)
				kontakteForPerson.add(k);
		}

		return kontakteForPerson;
	}

	// i was returning list of address before... tbh to get from list, which is
	// equal to one object...
	@Override
	public CompleteAddress getCompleteAddressByPersonPk(String pk) {
		CompleteAddress getOnePersonPk = new CompleteAddress();

		List<CompleteAddress> getCompletePersonDetail = getCompleteAddressList();

		for (CompleteAddress get : getCompletePersonDetail) {
			if (pk.compareTo(get.getPerson().getPk()) == 0) {
				getOnePersonPk = get;
			}
		}
		return getOnePersonPk;
	}


	@Override
	public CompleteAddress createPersonPk() {

		CompleteAddress addressPersonPk = new CompleteAddress();

		Person personPk = personenService.createPerson();

		System.out.println("personPk generated: " + personPk.getPk());

		// bitte kein List benutzen nur object
		addressPersonPk.setPerson(personPk);
		addressPersonPk.setKontakt(null);
		addressPersonPk.setAnschrift(null);

		System.out.println("Filled List: " + addressPersonPk);

		return addressPersonPk;
	}

	@Override
	public CompleteAddress addNewPersonAddress(Person addressWithPersonPk) {

		CompleteAddress completeAddress = new CompleteAddress();
		log.info("testing : " + completeAddress);
		Person person = personenService.addPerson(addressWithPersonPk);

		completeAddress.setPerson(person);
		log.info("testing : " + completeAddress);

		completeAddress.setKontakt(null);
		completeAddress.setAnschrift(null);

		return completeAddress;
	}

	@Override
	public CompleteAddress createKontaktPk(String person_Pk) {
		CompleteAddress addressKontaktPk = new CompleteAddress();

		Kontakt kontaktPk = kontaktService.createKontakt(person_Pk);
		System.out.println("Kontaktpk and fk : " + kontaktPk.toString());

		addressKontaktPk.setKontakt(kontaktPk);
		addressKontaktPk.setAnschrift(null);
		addressKontaktPk.setPerson(null);

		return addressKontaktPk;
	}

	@Override
	public CompleteAddress addNewKontaktAddress(Kontakt addressWithKontaktPk) {
		CompleteAddress completeAddress = new CompleteAddress();
		System.out.println("Testing addNewKontaktAddress");

		Kontakt newKontakt = kontaktService.addKontakt(addressWithKontaktPk);

		completeAddress.setKontakt(newKontakt);
		completeAddress.setAnschrift(null);
		completeAddress.setPerson(null);

		System.out.println("Result : " + completeAddress);
		return completeAddress;
	}

	@Override
	public CompleteAddress createAnschriftPk(String person_Pk) {
		// TODO Auto-generated method stub
		CompleteAddress addressAnschriftPk = new CompleteAddress();

		Anschrift anschriftPk = anschriftService.createAnschrift(person_Pk);

		addressAnschriftPk.setAnschrift(anschriftPk);
		addressAnschriftPk.setPerson(null);
		addressAnschriftPk.setKontakt(null);

		return addressAnschriftPk;
	}

	@Override
	public CompleteAddress addNewAnschriftAddress(Anschrift anschriftWithAnschriftPk) {

		CompleteAddress completeAddressAnschrift = new CompleteAddress();

		Anschrift addAnschrift = anschriftService.addAnschrift(anschriftWithAnschriftPk);

		completeAddressAnschrift.setAnschrift(addAnschrift);
		completeAddressAnschrift.setKontakt(null);
		completeAddressAnschrift.setPerson(null);

		System.out.println("Result : " + completeAddressAnschrift);

		return completeAddressAnschrift;
	}
	
	/**
	 * I was at first removing only the modal part of the element but
	 * tbh it should be removed from the entity(db) so for that the 
	 * services of particular entity is called and removed the elements
	 */
	@Override
	public List<CompleteAddress> removeAddressByPersonPk(String personPk) {

		List<CompleteAddress> addressList = getCompleteAddressList();
		System.out.println("\n ---------------");
		
		CompleteAddress foundAdr = null;

		for (CompleteAddress adr : addressList) {
			if (personPk.compareTo(adr.getPerson().getPk()) == 0) {

				foundAdr = adr;

				break;
			}
		}
		if (foundAdr != null) {
			System.out.println("DeleteAnschrift \n");
			this.anschriftService.deleteAnschriftByPersonPk(personPk);
			System.out.println("DeleteKontakt \n");
			this.kontaktService.deleteKontaktByPersonPk(personPk);
			System.out.println("DeletePerson \n");
			this.personenService.deletePerson(personPk);
			addressList.remove(foundAdr);
		}
		return addressList;
	}

	@Override
	public List<CompleteAddress> importAddressBookModel(MultipartFile file) throws Exception {
		List<CompleteAddress> completeAddressBookList = new ArrayList<>();
		
		List<Person> peopleList = personenService.uploadPersonModel(file);
		
		List<Kontakt> kontaktList = kontaktService.uploadKontaktModel(file);
		
		List<Anschrift> anschriftList = anschriftService.importAnschriftModel(file);
		
		for (Person p : peopleList) {
			CompleteAddress completeAddress = buildCompleteAddress(p, kontaktList, anschriftList);
			completeAddressBookList.add(completeAddress);
		}
		
		return completeAddressBookList;
	}
	
//	private CompleteAddress buildCompleteAddress(Person person, List<Kontakt> kontaktList) {
//		CompleteAddress completeAddress = new CompleteAddress();
//
//		completeAddress.setPerson(person);
//
//		// getKontaktByFk(e.getPk()) -> KontaktListe
//		List<Kontakt> kontakteForPerson = getKontaktListeByPersonFk(person.getPk(), kontaktList);
//		// getAnschiftByFk(e.getPk()) -> Anschrift
//
//		if (!kontakteForPerson.isEmpty())
//			completeAddress.setKontakt(kontakteForPerson.get(0));
//
//		return completeAddress;
	}

	@Override
	public String uploadAddressBook(MultipartFile file) throws Exception {
		
		personenService.uploadPerson(file);
		
		kontaktService.uploadKontakt(file);
		
		return "all details are uploaded";
	}

}
