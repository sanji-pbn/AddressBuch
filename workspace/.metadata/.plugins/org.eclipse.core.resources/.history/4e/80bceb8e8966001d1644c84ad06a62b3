package de.ems.addressbuch.controller;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.univocity.parsers.common.record.Record;
import com.univocity.parsers.csv.CsvParser;
import com.univocity.parsers.csv.CsvParserSettings;

import de.ems.addressbuch.entities.KontaktEntity;
import de.ems.addressbuch.entities.PersonEntity;
import de.ems.addressbuch.entities.Testv1Entity;
import de.ems.addressbuch.enumerations.Enum_Messagetyp;
import de.ems.addressbuch.model.Person;
import de.ems.addressbuch.repository.PersonenRepository;
import de.ems.addressbuch.service.PersonenService;

/**
 * @author prabint
 *
 */
@RestController
@RequestMapping("/api/")
@CrossOrigin()
public class PersonenController {
	
	@Autowired
	private PersonenService personenService;
	@Autowired
	private PersonenRepository personRepository;

	@GetMapping("/version")
	public ResponseEntity<String> getVersion() {
		System.out.println("Enter Version person");
		return new ResponseEntity<String>("V0.0.0", HttpStatus.OK);
	}

	@GetMapping("/personen/getPerson")
	public List<Person> getAllPersonen() {
		System.out.println("getAllPersonen");		
		return personenService.getAllPersonen();
	}	

	/**
	 * Step 1
	 * Create a new empty Person obj with pk
	 * @return
	 */
	@GetMapping("/personen/createPk")
	public ResponseEntity<Person> createNewPersonPk(){
		System.out.println("Enter createNewPerson");
		return ResponseEntity.ok(personenService.createPerson());
	}

	/**
	 * Step 2
	 * @param person
	 * @return
	 */
	@PostMapping("/personen/add")
	public Person createNewPerson(@RequestBody Person person) {
		System.out.println("Testing for creating");
		return personenService.addPerson(person);
	}	
	
	//Get by id api
	@GetMapping("/personen/getPerson/{pk}")
	public ResponseEntity<Person> getPersonByPk(@PathVariable String pk){
		System.out.println("Person with id: " + pk);
		Person getPerson = personenService.getPersonByPk(pk);
		return new ResponseEntity<>(getPerson, HttpStatus.OK);
	}
	
	@PutMapping("/personen/updatePerson/{pk}")
	public ResponseEntity<Person> updatePerson(@PathVariable String pk, @RequestBody Person personDetails){
		System.out.println("it is updated");
		return personenService.updatePerson(pk, personDetails);
	}
	
	@DeleteMapping("/personen/{pk}")
	public ResponseEntity<Map<String, Boolean>> deletePerson(@PathVariable String pk){
		System.out.println("Person with id: " + pk + "is deleted");
		return personenService.deletePerson(pk);
	}
		
	@GetMapping("/personen/getPersonWithAdrbkPk/{adrbkFk}")
	public List<Person> getPersonWithAdrbkPk(@PathVariable String adrbkFk){
		return personenService.getPersonWithAdrbkPk(adrbkFk);
	}
	
	@GetMapping("/personen/uploadModel")
	public List<Person> uploadPersonModel (@RequestParam("file") MultipartFile file) throws Exception {
		return personenService.importPersonModel(file);
	}
	
	@PostMapping("/personen/upload")
	public String uploadData (@RequestParam("file") MultipartFile file) throws Exception {
		return personenService.uploadPerson(file);
	}
	
	@GetMapping("/personen/downloadCSV")
	public void getAllPersonenInCsv(HttpServletResponse servletResponse) throws IOException{
		servletResponse.setContentType("type/csv");
		servletResponse.addHeader("Content-Disposition", "attachment; filename=\"data.csv\"");
		
	}
}
