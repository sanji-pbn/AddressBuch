package de.ems.addressbuch.controller;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.univocity.parsers.common.record.Record;
import com.univocity.parsers.csv.CsvParser;
import com.univocity.parsers.csv.CsvParserSettings;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import de.ems.addressbuch.entities.KontaktEntity;
import de.ems.addressbuch.enumerations.Enum_Messagetyp;
import de.ems.addressbuch.model.Kontakt;
import de.ems.addressbuch.repository.KontaktRepository;
import de.ems.addressbuch.service.KontaktService;

@RestController
@CrossOrigin()
@RequestMapping("/api/")
public class KontaktController {

	@Autowired
	private KontaktService kontaktService;
	@Autowired
	private KontaktRepository kontaktRepository;

	@GetMapping("/versiontype")
	public ResponseEntity<String> getVersion() {
		System.out.println("Enter Version kontakt");
		return new ResponseEntity<String>("V0.0.1.Kontakt", HttpStatus.OK);
	}

	@GetMapping("/personen/kontakte/getKontakt")
	public List<Kontakt> getAlleKontakte() {
		return kontaktService.getAlleKontakte();
	}

	// create person restAPI
	@GetMapping("/kontakt/create/{person_fk}")
	public ResponseEntity<Kontakt> create(@PathVariable String person_fk) {
		System.out.println("Enter kontakt/create");
		return ResponseEntity.ok(kontaktService.createKontakt(person_fk));
	}

	@PostMapping("/kontakt/add")
	public Kontakt addKontakt(@RequestBody Kontakt kontakt) {
		System.out.println("addKontakt");
		return kontaktService.addKontakt(kontakt);
	}

	// get by pk
	@GetMapping("/kontakt/getKontakt/{pk}")
	public ResponseEntity<Kontakt> getKontaktByPk(@PathVariable String pk) {
		Kontakt getKontakt = kontaktService.getKontaktByPk(pk);
		return new ResponseEntity<>(getKontakt, HttpStatus.OK);
	}
	
	
	// information... the name of the path variable should be same as the 
	// name of the method parameter----- when changed, it will give error
	// get by personFk
	@GetMapping("/personen/kontakte/getKontakt/{personFk}")
	public List<Kontakt> getKontaktWithPersonFk(@PathVariable String personFk){
		return kontaktService.getKontaktByPersonFk(personFk);
	}

	// to update kontakt
	@PutMapping("/personen/updateKontakt/{pk}")
	public Kontakt updateKontakt(@PathVariable String pk, @RequestBody Kontakt details) {
		System.out.println("Kontakt edited");
		return kontaktService.updateKontakt(pk, details);
	}

	@DeleteMapping("/kontakt/delete/{pk}")
	public ResponseEntity<Map<String, Boolean>> deleteKontakt(@PathVariable String pk) {
		System.out.println("Kontakt with id: " + pk + " is deleted");
		return kontaktService.deleteKontaktByKontaktPk(pk);
	}
	
	@PostMapping("/kontakt/upload")
	public String uploadData (@RequestParam("file") MultipartFile file) throws Exception {
		List<KontaktEntity> kontaktList = new ArrayList<>();
		
		InputStream inputStream = file.getInputStream();
		
	
		
		CsvParserSettings setting = new CsvParserSettings();
		
		setting.setHeaderExtractionEnabled(true);
		
		CsvParser parser = new CsvParser(setting);
		
		List<Record> parseAllRecords = parser.parseAllRecords(inputStream);
		
		System.out.println(parseAllRecords.toString());
		
		parseAllRecords.forEach(record -> {
			KontaktEntity kontakt = new KontaktEntity();
			
			kontakt.setKontaktPk(record.getString("Pk"));
			kontakt.setPerson_fk(record.getString("Person_fk"));
			kontakt.setMessagetyp_Enum(Enum_Messagetyp.valueOf(((Kontakt) record).getMessageTyp()));
			kontakt.setEmailOrPhone(record.getString("EmailOrPhone"));
			kontakt.setAktiv(true);
			
			kontaktList.add(kontakt);
		});	
		kontaktRepository.saveAll(kontaktList);
		return "upload success";
	}
	
	
	
	

}
