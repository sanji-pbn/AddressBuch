package de.ems.addressbuch.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import de.ems.addressbuch.entities.AnschriftEntity;
import de.ems.addressbuch.enumerations.Enum_Anschriftentyp;
import de.ems.addressbuch.exception.ResourceNotFoundException;
import de.ems.addressbuch.model.Anschrift;
import de.ems.addressbuch.repository.AnschriftRepository;
import de.ems.tools.AbstractPK;

@Service
public class AnschriftServiceImpl implements AnschriftService {
	
	@Autowired
	private AnschriftRepository anschriftRepository;

	private static Logger log = Logger.getLogger(AnschriftServiceImpl.class.getName());
	
	// in model
	@Override
	public Anschrift createAnschrift() {
		Anschrift a = new Anschrift();
		a.setPk(AbstractPK.create());
		return a;
	}

	// to table
	@Override
	public AnschriftEntity addAnschrift(Anschrift anschrift) {
		if(anschrift.getPerson_fk() == null) {
			log.error("Anschrift is not available");
			return null;
		}			
		AnschriftEntity newAnschrift = this.toEntity(anschrift);
	
		return anschriftRepository.save(newAnschrift);
	}
	
	// to table
	private AnschriftEntity toEntity(Anschrift anschrift) {
		AnschriftEntity e = new AnschriftEntity();
		
		e.setPerson_fk(anschrift.getPerson_fk());
		e.setPlz(anschrift.getPlz());
		e.setOrt(anschrift.getOrt());
		e.setLand(anschrift.getLand());
		e.setStrasse(anschrift.getStrasse());
		e.setAnschriftentyp_Enum(Enum_Anschriftentyp.valueOf(anschrift.getAnschriftentyp()));
		e.setAktiv(true);
		
		return e; 
	}
	
	@Override
	public List<Anschrift> getAlleAnschrifte() {
		List<Anschrift> aList = new ArrayList<>();
		
		List<AnschriftEntity> pList = anschriftRepository.findAll();
		
		for(AnschriftEntity e : pList) {
			aList.add(toModel(e));
		}
		System.out.println(aList.toString());
		return aList;
	}
	
	// from table
	@Override
	public Anschrift getAnschriftByPk(String pk) {
		AnschriftEntity e = anschriftRepository.findById(pk).orElseThrow(() -> new ResourceNotFoundException("Adresse existiert nicht : " + pk));
		return toModel(e);
	}
	
	// from table
	private Anschrift toModel(AnschriftEntity entity) {
		Anschrift m = new Anschrift();
		m.setPerson_fk(entity.getPerson_fk());
		m.setPlz(entity.getPlz());
		m.setOrt(entity.getOrt());
		m.setLand(entity.getLand());
		m.setStrasse(entity.getStrasse());
		m.setAnschriftentyp(entity.getAnschriftentyp_Enum().name());
		m.setAktiv(true);
		
		return m;
	}

	@Override
	public ResponseEntity<AnschriftEntity> updateAnschrift(String pk, AnschriftEntity anschriftDetails) {
		AnschriftEntity editAnschrift = anschriftRepository.findById(pk).orElseThrow(() -> new ResourceNotFoundException("Adresse existiert nicht : " + pk));
		
		editAnschrift.setPlz(anschriftDetails.getPlz());
		editAnschrift.setOrt(anschriftDetails.getOrt());
		editAnschrift.setLand(anschriftDetails.getLand());
		editAnschrift.setStrasse(anschriftDetails.getStrasse());
		editAnschrift.setAnschriftentyp_Enum(anschriftDetails.getAnschriftentyp_Enum());
		editAnschrift.setAktiv(anschriftDetails.isAktiv());
		
		AnschriftEntity editedAnschrift = anschriftRepository.save(editAnschrift);
		
		return ResponseEntity.ok(editedAnschrift);
	}

	@Override
	public ResponseEntity<Map<String, Boolean>> deleteAnschrift(String pk) {
		AnschriftEntity anschriftDelete = anschriftRepository.findById(pk).orElseThrow(() -> new ResourceNotFoundException("Adresse existiert nicht : " + pk));
		
		anschriftRepository.delete(anschriftDelete);
		
		Map<String, Boolean> response = new HashMap<>();
		response.put("Adresse delete", Boolean.TRUE);
		return ResponseEntity.ok(response);
	}
}
