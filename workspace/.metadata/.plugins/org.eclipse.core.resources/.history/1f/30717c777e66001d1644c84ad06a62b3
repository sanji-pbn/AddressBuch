
package de.ems.addressbuch.controller;

import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import de.ems.addressbuch.model.Anschrift;
import de.ems.addressbuch.model.CompleteAddress;
import de.ems.addressbuch.model.Kontakt;
import de.ems.addressbuch.model.Person;
import de.ems.addressbuch.service.CompleteAddressService;



@RestController
@RequestMapping("/api/")
@CrossOrigin()
public class CompleteAddressController {
	private static Logger log = Logger.getLogger(CompleteAddressController.class.getName());
	
	@Autowired
	private CompleteAddressService completeAddressService;

	@GetMapping("/versionComplete")
	public ResponseEntity<String> getVersion() {
		return new ResponseEntity<String>("V0.0.3", HttpStatus.OK);
	}

	@GetMapping("completeAddress/getAllePerson")
	public List<CompleteAddress> getAllData() {
		//System.out.println("All Data");
		//List<CompletAddress> completAddressList = completAddressService.getCompletAddressList();
		return completeAddressService.getCompleteAddressList();
	}
	
	
	
	@GetMapping("completeAddress/getAllePerson/{pk}")
	public CompleteAddress getAddressByPk(@PathVariable String pk){
		return completeAddressService.getCompleteAddressByPersonPk(pk);
	}
	
	@GetMapping("completeAddress/addPk")
	public CompleteAddress createPersonPk(){
		return completeAddressService.createPersonPk();
	}
	
	@PostMapping("completeAddress/addPerson")
	public CompleteAddress addNewPerson(@RequestBody Person person){
		System.out.println("AddNewPerson");
	
		return completeAddressService.addNewPersonAddress(person);
	}
	
	@GetMapping("completeAddress/addKontaktPk/{person_pk}")
	public CompleteAddress createKontaktPk(@PathVariable String person_pk) {
		
		return completeAddressService.createKontaktPk(person_pk);
	}
	
	@PostMapping("completeAddress/addKontakt")
	public CompleteAddress addNewKontakt(@RequestBody Kontakt kontakt) {
		System.out.println("Testing addNewKontakt : ");
		
		return completeAddressService.addNewKontaktAddress(kontakt);
	}
	
	@GetMapping("completeAddress/addAnschriftPk/{person_fk}")
	public CompleteAddress createAnschriftPk(@PathVariable String person_fk) {
		
		return completeAddressService.createAnschriftPk(person_fk);
	}
	
	@PostMapping("completeAddress/addAnschrift")
	public CompleteAddress addNewAnschrift(@RequestBody Anschrift anschrift) {
		System.out.println("Enter AddNewAnschrift");
		
		return completeAddressService.addNewAnschriftAddress(anschrift);
	}
	
	@DeleteMapping("completeAddress/deletePerson/{pk}")
	public List<CompleteAddress> deleteAddress(@PathVariable String pk){
		
		System.out.println("\n" + "Person with Pk: " + pk + " is deleted \n");
		
		return completeAddressService.removeAddressByPersonPk(pk);
	}
	
	
	@GetMapping("completeAddress/importCompleteAddressModal")
	public List<CompleteAddress> importCompleteAddress (@RequestParam ("file") MultipartFile file) throws Exception{
		return completeAddressService.importAddressBookModel(file);
	}
	
	@PostMapping("completeAddress/uploadCompleteAddress")
	public String uploadCompleteAddress (@RequestParam ("file") MultipartFile file) throws Exception{
		return completeAddressService.uploadAddressBook(file);
	}
}
